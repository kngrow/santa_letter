{"version":3,"sources":["InputComponent.js","FromComponent.js","App.js","serviceWorker.js","index.js"],"names":["InputComponent","textUpdate","e","props","onUpdate","target","value","name","row","col","onChange","this","bind","React","Component","FromComponent","className","defaultValue","FontFaceObserver","require","App","updateText","val","setState","text","updateName","downloadImage","event","img","document","querySelector","toDataURL","replace","href","convertText","state","split","map","m","k","key","html2canvas","then","canvas","letter_img","firstChild","removeChild","appendChild","isFontLoaded","load","console","log","xs","lg","onClick","download","role","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.19eb844d.chunk.js","sourcesContent":["import React from 'react';\n\n\nexport class InputComponent extends React.Component {\n  textUpdate = (e) => {\n    this.props.onUpdate(e.target.value);\n  }\n\n  render() {\n    return (\n        <textarea name=\"input_text\" row=\"8\" col=\"40\" onChange={this.textUpdate.bind(this)}></textarea>\n    )\n  }\n}\n","import React from 'react';\nimport { Col } from 'reactstrap';\n\n\nexport class FromComponent extends React.Component {\n  textUpdate = (e) => {\n    this.props.onUpdate(e.target.value);\n  }\n\n  render() {\n    return (\n      <Col className=\"text-right\">\n        おなまえ:<input name=\"form_name\" onChange={this.textUpdate.bind(this)} defaultValue='たかし' />\n      </Col>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport './App.scss';\nimport {InputComponent} from './InputComponent.js'\nimport {FromComponent} from './FromComponent.js'\nimport { Container, Row, Col } from 'reactstrap';\nimport html2canvas from 'html2canvas';\n\nconst FontFaceObserver = require('fontfaceobserver');\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      text: \"\",\n      name: \"たかし\",\n      isFontLoaded: false,\n    }\n  }\n  updateText = (val) => {\n    this.setState({\n      text : val\n    });\n  }\n  updateName = (val) => {\n    this.setState({\n      name:val\n    });\n  }\n  componentDidMount() {\n    const font = new FontFaceObserver('zenzidou');\n    font.load().then( () => {\n      this.setState({\n        'isFontLoaded' : true\n      });\n      console.log('font has loaded');\n    });\n  }\n\n  downloadImage = (event) => {\n    const img = document.querySelector('canvas').toDataURL('image/png').replace('image/png','image/octet-stream');\n    event.target.href = img;\n  }\n\n  convertText = () => {\n    if(this.state.text !== \"\"){\n      const text = this.state.text.split('\\n').map((m,k) => <span key={k}>{m}</span>);\n\n      html2canvas(document.querySelector('.letter_text')).then(canvas => {\n      let letter_img = document.querySelector('.letter_img');\n        if(letter_img.firstChild){\n          letter_img.removeChild(letter_img.firstChild);\n        }\n        letter_img.appendChild(canvas);\n      });\n      return text;\n    } else {\n      return \"\";\n    }\n  }\n\n  render() {\n    if (this.state.isFontLoaded) {\n      return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <h1>さんたさんにてがみを書くやつ</h1>\n          </header>\n          <Container>\n            <Row>\n              <Col className=\"how_to_use\">\n                <p>さんたさんに<ruby>手<rt>て</rt>紙<rt>がみ</rt></ruby>をかいてみよう！</p>\n              </Col>\n            </Row>\n            <Row>\n              <Col className=\"form\" xs=\"12\" lg=\"6\">\n                <div className=\"text-left\">さんたさんへ</div>\n                  <InputComponent onUpdate={ this.updateText }/>\n                  <FromComponent onUpdate={ this.updateName }/>\n              </Col>\n              <Col xs=\"12\" lg=\"6\">\n                <p className=\"letter_text\">\n                    <span className=\"dear_santa\">さんたさんへ</span>\n                    { this.convertText() }\n                    <span className=\"from_name\">{this.state.name} より</span>\n                  </p>\n              </Col>\n            </Row>\n            <Row>\n              <Col>\n                <div className=\"letter_img\"></div>\n                <a href=\"#\" onClick={this.downloadImage} className=\"Button\" download=\"tegami.png\">てがみを保存する</a>\n              </Col>\n            </Row>\n          <Row className=\"text-white\">\n            <Col>\n              <p>\n                てがみの文字の生成には<a href=\"https://tanukifont.com/zenjido/\" target=\"_blank\">全児童ふぉんと</a> の無料版を使わせていただきました<br />\n              </p>\n            </Col>\n          </Row>\n          </Container>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <h1>さんたさんにてがみを書くやつ</h1>\n          </header>\n          <Container className=\"loading\">\n             <Row>\n              <div role=\"status\" className=\"spinner-border text-primary loader\"><span className=\"sr-only\">Loading...</span></div>\n              </Row>\n          </Container>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}